// <auto-generated />
using System;
using DermDiag.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DermDiag.Migrations
{
    [DbContext(typeof(DermDiagContext))]
    [Migration("20240617100025_ConsulteUpdated")]
    partial class ConsulteUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DermDiag.Models.Book", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_ID");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_ID");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("Payment_ID");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Appointment_Date");

                    b.HasKey("PatientId", "DoctorId", "PaymentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.Consulte", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_ID");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DoctorAttendance")
                        .HasColumnType("bit")
                        .HasColumnName("Doctor_Attendance");

                    b.Property<string>("DoctorLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PatientAttendance")
                        .HasColumnType("bit")
                        .HasColumnName("Patient_Attendance");

                    b.Property<string>("PatientLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientId", "DoctorId")
                        .HasName("PK__Consulte__2FF13E69B0C57837");

                    b.HasIndex("DoctorId");

                    b.ToTable("Consulte", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AcceptanceStatus")
                        .HasColumnType("bit")
                        .HasColumnName("Acceptance_Status");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Fees")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<int?>("NoReviews")
                        .HasColumnType("int")
                        .HasColumnName("No_Reviews");

                    b.Property<int?>("NoSessions")
                        .HasColumnType("int")
                        .HasColumnName("No_Sessions");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Doctor__3214EC277293A442");

                    b.HasIndex(new[] { "Email" }, "UQ__Doctor__A9D105344BCD1DAD")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.MedicineAdvice", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_ID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_ID");

                    b.Property<string>("MedicineName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Medicine_Name");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId", "PatientId", "MedicineName");

                    b.HasIndex("PatientId");

                    b.ToTable("Medicine_Advice", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.ModelInputImage", b =>
                {
                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Image_URL");

                    b.Property<int?>("ModelHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("Model_History_ID");

                    b.HasIndex("ModelHistoryId");

                    b.ToTable("Model_Input_Images", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Patient__3214EC277AF761B0");

                    b.HasIndex(new[] { "Email" }, "UQ__Patient__A9D105346DCA7C3A")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.PatientModelHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("ModelResult")
                        .HasColumnType("text")
                        .HasColumnName("Model_Result");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_ID");

                    b.HasKey("Id")
                        .HasName("PK__Patient___3214EC275616F051");

                    b.HasIndex("PatientId");

                    b.ToTable("Patient_Model_History", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReceiverID")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<int?>("SenderID")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Payment__3214EC27357C9B09");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.Review", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Endtime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RepeatingDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("Starttime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Balance");

                    b.HasKey("Id")
                        .HasName("ID");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Favorite", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("Patient_ID");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_ID");

                    b.HasKey("PatientId", "DoctorId")
                        .HasName("PK__Favorite__2FF13E69A503B9A2");

                    b.HasIndex("DoctorId");

                    b.ToTable("Favorite", (string)null);
                });

            modelBuilder.Entity("DermDiag.Models.Book", b =>
                {
                    b.HasOne("DermDiag.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Book__Doctor_ID__4D94879B");

                    b.HasOne("DermDiag.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Book__Patient_ID__4CA06362");

                    b.HasOne("DermDiag.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Book__Payment_ID__4E88ABD4");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("DermDiag.Models.Consulte", b =>
                {
                    b.HasOne("DermDiag.Models.Doctor", "Doctor")
                        .WithMany("Consultes")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__Consulte__Doctor__5629CD9C");

                    b.HasOne("DermDiag.Models.Patient", "Patient")
                        .WithMany("Consultes")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__Consulte__Patien__5535A963");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DermDiag.Models.MedicineAdvice", b =>
                {
                    b.HasOne("DermDiag.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Medicine___Docto__59063A47");

                    b.HasOne("DermDiag.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Medicine___Patie__5812160E");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DermDiag.Models.ModelInputImage", b =>
                {
                    b.HasOne("DermDiag.Models.PatientModelHistory", "ModelHistory")
                        .WithMany()
                        .HasForeignKey("ModelHistoryId")
                        .HasConstraintName("FK__Model_Inp__Model__48CFD27E");

                    b.Navigation("ModelHistory");
                });

            modelBuilder.Entity("DermDiag.Models.PatientModelHistory", b =>
                {
                    b.HasOne("DermDiag.Models.Patient", "Patient")
                        .WithMany("PatientModelHistories")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK__Patient_M__Patie__46E78A0C");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DermDiag.Models.Review", b =>
                {
                    b.HasOne("DermDiag.Models.Doctor", "Doctor")
                        .WithMany("Reviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DermDiag.Models.Patient", "Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DermDiag.Models.Tasks", b =>
                {
                    b.HasOne("DermDiag.Models.Patient", "Patient")
                        .WithMany("Tasks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Favorite", b =>
                {
                    b.HasOne("DermDiag.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorite__Doctor__52593CB8");

                    b.HasOne("DermDiag.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__Favorite__Patien__5165187F");
                });

            modelBuilder.Entity("DermDiag.Models.Doctor", b =>
                {
                    b.Navigation("Consultes");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DermDiag.Models.Patient", b =>
                {
                    b.Navigation("Consultes");

                    b.Navigation("PatientModelHistories");

                    b.Navigation("Reviews");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
